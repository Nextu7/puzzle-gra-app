{{ 'section-multicolumn.css' | asset_url | stylesheet_tag }}
{{ 'component-slider.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  .media-with-multicolumn__wrapper {
    display: grid;
    gap: 3rem;
    align-items: center;
  }

  @media screen and (min-width: 990px) {
    .media-with-multicolumn__wrapper {
      grid-template-columns: 1fr 1fr;
    }

    .media-with-multicolumn__wrapper--image-second .media-with-multicolumn__media {
      order: 2;
    }
  }

  .media-with-multicolumn__media {
    border-radius: var(--media-radius);
    overflow: hidden;
  }

  /* Before/After Slider Styles */
  .before-after-slider {
    position: relative;
    width: 100%;
    overflow: hidden;
    cursor: grab;
    user-select: none;
  }

  .before-after-slider:active {
    cursor: grabbing;
  }

  .before-after-slider__image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .before-after-slider__image-wrapper--after {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    clip-path: inset(0 0 0 50%);
  }

  .before-after-slider__image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .before-after-slider__handle {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    width: 4px;
    background: white;
    transform: translateX(-50%);
    cursor: ew-resize;
    box-shadow: 0 0 12px rgba(0,0,0,0.3);
  }

  .before-after-slider__handle-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40px;
    height: 40px;
    background: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
  }

  .before-after-slider__handle-icon svg {
    width: 24px;
    height: 24px;
  }

  .before-after-slider__label {
    position: absolute;
    padding: 0.5rem 1rem;
    background: rgba(0,0,0,0.7);
    color: white;
    font-size: 0.875rem;
    border-radius: 4px;
    top: 1rem;
  }

  .before-after-slider__label--before {
    left: 1rem;
  }

  .before-after-slider__label--after {
    right: 1rem;
  }
{%- endstyle -%}

{%- liquid
  assign columns_mobile_int = section.settings.columns_mobile | plus: 0
  assign show_mobile_slider = false
  if section.settings.swipe_on_mobile and section.blocks.size > columns_mobile_int
    assign show_mobile_slider = true
  endif
-%}

<div class="multicolumn color-{{ section.settings.color_scheme }} gradient{% unless section.settings.background_style == 'none' and settings.text_boxes_border_thickness > 0 or settings.text_boxes_shadow_opacity > 0 %} background-{{ section.settings.background_style }}{% endunless %}{% if section.settings.title == blank %} no-heading{% endif %}">
  <div
    class="page-width section-{{ section.id }}-padding isolate{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
    {% if settings.animations_reveal_on_scroll %}
      data-cascade
    {% endif %}
  >
    {%- unless section.settings.title == blank -%}
      <div class="title-wrapper-with-link title-wrapper--self-padded-mobile title-wrapper--no-top-margin multicolumn__title">
        <h2 class="title inline-richtext {{ section.settings.heading_size }}">
          {{ section.settings.title }}
        </h2>
        {%- if section.settings.button_label != blank and show_mobile_slider -%}
          <a href="{{ section.settings.button_link }}" class="link underlined-link large-up-hide">
            {{- section.settings.button_label | escape -}}
          </a>
        {%- endif -%}
      </div>
    {%- endunless -%}

    <div class="media-with-multicolumn__wrapper{% if section.settings.desktop_layout == 'image_second' %} media-with-multicolumn__wrapper--image-second{% endif %}">
      
      {%- comment -%} Media Column {%- endcomment -%}
      <div class="media-with-multicolumn__media">
        {%- if section.settings.enable_before_after and section.settings.before_image != blank and section.settings.after_image != blank -%}
          <div 
            class="media media--{{ section.settings.media_ratio }} global-media-settings"
            {% if section.settings.media_ratio == 'adapt' %}
              style="padding-bottom: {{ 1 | divided_by: section.settings.before_image.aspect_ratio | times: 100 }}%;"
            {% endif %}
          >
            <div class="before-after-slider" data-before-after-slider>
              <div class="before-after-slider__image-wrapper">
                {{
                  section.settings.before_image
                  | image_url: width: 1500
                  | image_tag:
                    class: 'before-after-slider__image',
                    widths: '165, 360, 535, 750, 1070, 1500',
                    loading: 'lazy'
                }}
              </div>
              <div class="before-after-slider__image-wrapper before-after-slider__image-wrapper--after" data-after-wrapper>
                {{
                  section.settings.after_image
                  | image_url: width: 1500
                  | image_tag:
                    class: 'before-after-slider__image',
                    widths: '165, 360, 535, 750, 1070, 1500',
                    loading: 'lazy'
                }}
              </div>
              <div class="before-after-slider__handle" data-slider-handle>
                <div class="before-after-slider__handle-icon">
                  <svg viewBox="0 0 24 24">
                    <path d="M8 7l-5 5 5 5M16 7l5 5-5 5" stroke="currentColor" stroke-width="2" fill="none"/>
                  </svg>
                </div>
              </div>
              {%- if section.settings.show_labels -%}
                <div class="before-after-slider__label before-after-slider__label--before">{{ section.settings.before_label | default: 'Before' }}</div>
                <div class="before-after-slider__label before-after-slider__label--after">{{ section.settings.after_label | default: 'After' }}</div>
              {%- endif -%}
            </div>
          </div>
        {%- elsif section.settings.media_image != blank -%}
          <div 
            class="media media--{{ section.settings.media_ratio }} global-media-settings"
            {% if section.settings.media_ratio == 'adapt' %}
              style="padding-bottom: {{ 1 | divided_by: section.settings.media_image.aspect_ratio | times: 100 }}%;"
            {% endif %}
          >
            {{
              section.settings.media_image
              | image_url: width: 1500
              | image_tag:
                widths: '165, 360, 535, 750, 1070, 1500',
                loading: 'lazy'
            }}
          </div>
        {%- else -%}
          <div class="media media--{{ section.settings.media_ratio }} placeholder">
            {{ 'image' | placeholder_svg_tag: 'placeholder-svg' }}
          </div>
        {%- endif -%}
      </div>

      {%- comment -%} Multicolumn Section {%- endcomment -%}
      <div class="media-with-multicolumn__columns">
        <slider-component class="slider-mobile-gutter">
          <ul
            class="multicolumn-list contains-content-container grid grid--{{ section.settings.columns_mobile }}-col-tablet-down grid--{{ section.settings.columns_desktop }}-col-desktop{% if show_mobile_slider %} slider slider--tablet grid--peek{% endif %}"
            id="Slider-{{ section.id }}"
            role="list"
          >
            {%- liquid
              assign highest_ratio = 0
              for block in section.blocks
                if block.settings.image.aspect_ratio > highest_ratio
                  assign highest_ratio = block.settings.image.aspect_ratio
                endif
              endfor
            -%}
            {%- for block in section.blocks -%}
              {%- assign empty_column = '' -%}
              {%- if block.settings.image == blank
                and block.settings.title == blank
                and block.settings.text == blank
                and block.settings.link_label == blank
              -%}
                {%- assign empty_column = ' multicolumn-list__item--empty' -%}
              {%- endif -%}

              <li
                id="Slide-{{ section.id }}-{{ forloop.index }}"
                class="multicolumn-list__item grid__item{% if section.settings.swipe_on_mobile %} slider__slide{% endif %}{% if section.settings.column_alignment == 'center' %} center{% endif %}{{ empty_column }}{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                {{ block.shopify_attributes }}
                {% if settings.animations_reveal_on_scroll %}
                  data-cascade
                  style="--animation-order: {{ forloop.index }};"
                {% endif %}
              >
                <div class="multicolumn-card content-container">
                  {%- if block.settings.image != blank -%}
                    {% if section.settings.image_ratio == 'adapt' or section.settings.image_ratio == 'circle' %}
                      {% assign spaced_image = true %}
                    {% endif %}
                    <div class="multicolumn-card__image-wrapper multicolumn-card__image-wrapper--{{ section.settings.image_width }}-width{% if section.settings.image_width != 'full' or spaced_image %} multicolumn-card-spacing{% endif %}">
                      <div
                        class="media media--transparent media--{{ section.settings.image_ratio }}"
                        {% if section.settings.image_ratio == 'adapt' %}
                          style="padding-bottom: {{ 1 | divided_by: highest_ratio | times: 100 }}%;"
                        {% endif %}
                      >
                        {%- liquid
                          assign number_of_columns = section.settings.columns_desktop
                          assign number_of_columns_mobile = section.settings.columns_mobile
                          assign grid_space_desktop = number_of_columns | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
                          assign grid_space_tablet = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | plus: 100 | append: 'px'
                          assign grid_space_mobile = number_of_columns_mobile | minus: 1 | times: settings.spacing_grid_horizontal | divided_by: 2 | plus: 30 | append: 'px'
                          if section.settings.image_width == 'half'
                            assign image_width = 0.5
                          elsif section.settings.image_width == 'third'
                            assign image_width = 0.33
                          else
                            assign image_width = 1
                          endif
                        -%}
                        {% capture sizes %}
                          (min-width: {{ settings.page_width }}px) calc(({{ settings.page_width }}px - {{ grid_space_desktop }}) * {{ image_width }} /  {{ number_of_columns }} / 2),
                          (min-width: 990px) calc((100vw - {{ grid_space_desktop }}) * {{ image_width }} / {{ number_of_columns }} / 2),
                          (min-width: 750px) calc((100vw - {{ grid_space_tablet }}) * {{ image_width }} / {{ number_of_columns_mobile }}),
                          calc((100vw - {{ grid_space_mobile }}) * {{ image_width }} / {{ number_of_columns_mobile }})
                        {% endcapture %}
                        {{
                          block.settings.image
                          | image_url: width: 3200
                          | image_tag:
                            widths: '50, 75, 100, 150, 200, 300, 400, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3200',
                            sizes: sizes,
                            class: 'multicolumn-card__image'
                        }}
                      </div>
                    </div>
                  {%- endif -%}
                  <div class="multicolumn-card__info">
                    {%- if block.settings.title != blank -%}
                      <h3 class="inline-richtext">{{ block.settings.title }}</h3>
                    {%- endif -%}
                    {%- if block.settings.text != blank -%}
                      <div class="rte">{{ block.settings.text }}</div>
                    {%- endif -%}
                    {%- if block.settings.link_label != blank -%}
                      <a
                        class="link animate-arrow"
                        {% if block.settings.link == blank %}
                          role="link" aria-disabled="true"
                        {% else %}
                          href="{{ block.settings.link }}"
                        {% endif %}
                      >
                        {{- block.settings.link_label | escape -}}
                        <span class="svg-wrapper"
                          ><span class="icon-wrap">&nbsp;{{ 'icon-arrow.svg' | inline_asset_content }}</span></span
                        >
                      </a>
                    {%- endif -%}
                  </div>
                </div>
              </li>
            {%- endfor -%}
          </ul>

          {%- if show_mobile_slider -%}
            <div class="slider-buttons large-up-hide">
              <button
                type="button"
                class="slider-button slider-button--prev"
                name="previous"
                aria-label="{{ 'general.slider.previous_slide' | t }}"
              >
                <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
              </button>
              <div class="slider-counter caption">
                <span class="slider-counter--current">1</span>
                <span aria-hidden="true"> / </span>
                <span class="visually-hidden">{{ 'general.slider.of' | t }}</span>
                <span class="slider-counter--total">{{ section.blocks.size }}</span>
              </div>
              <button
                type="button"
                class="slider-button slider-button--next"
                name="next"
                aria-label="{{ 'general.slider.next_slide' | t }}"
              >
                <span class="svg-wrapper">{{ 'icon-caret.svg' | inline_asset_content }}</span>
              </button>
            </div>
          {%- endif -%}
        </slider-component>
        <div class="center{% if show_mobile_slider %} small-hide medium-hide{% endif %}">
          {%- if section.settings.button_label != blank -%}
            <a
              class="button button--primary"
              {% if section.settings.button_link == blank %}
                role="link" aria-disabled="true"
              {% else %}
                href="{{ section.settings.button_link }}"
              {% endif %}
            >
              {{ section.settings.button_label | escape }}
            </a>
          {%- endif -%}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  (function() {
    'use strict';
    
    // Initialize Before/After Sliders
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initSliders);
    } else {
      initSliders();
    }
    
    function initSliders() {
      const sliders = document.querySelectorAll('[data-before-after-slider]');
      
      sliders.forEach(slider => {
        const handle = slider.querySelector('[data-slider-handle]');
        const afterWrapper = slider.querySelector('[data-after-wrapper]');
        
        if (!handle || !afterWrapper) return;
        
        let isDragging = false;
        let animationFrame = null;
        let sliderRect = null;
        
        function updateSliderRect() {
          sliderRect = slider.getBoundingClientRect();
        }
        
        function updateSliderPosition(clientX) {
          if (!isDragging || !sliderRect) return;
          
          if (animationFrame) {
            cancelAnimationFrame(animationFrame);
          }
          
          animationFrame = requestAnimationFrame(() => {
            const position = ((clientX - sliderRect.left) / sliderRect.width) * 100;
            const clampedPosition = Math.max(0, Math.min(100, position));
            
            handle.style.left = clampedPosition + '%';
            afterWrapper.style.clipPath = `inset(0 0 0 ${clampedPosition}%)`;
          });
        }
        
        function handleMove(e) {
          e.preventDefault();
          const clientX = e.type.includes('touch') ? e.touches[0].clientX : e.clientX;
          updateSliderPosition(clientX);
        }
        
        function startDragging(e) {
          isDragging = true;
          updateSliderRect();
          slider.style.cursor = 'grabbing';
          handleMove(e);
          
          if (e.type.includes('touch')) {
            document.addEventListener('touchmove', handleMove, { passive: false });
            document.addEventListener('touchend', stopDragging, { once: true });
          } else {
            document.addEventListener('mousemove', handleMove);
            document.addEventListener('mouseup', stopDragging, { once: true });
          }
        }
        
        function stopDragging() {
          isDragging = false;
          slider.style.cursor = 'grab';
          
          if (animationFrame) {
            cancelAnimationFrame(animationFrame);
          }
          
          document.removeEventListener('mousemove', handleMove);
          document.removeEventListener('touchmove', handleMove);
        }
        
        // Event listeners
        handle.addEventListener('mousedown', startDragging);
        handle.addEventListener('touchstart', startDragging, { passive: false });
        slider.addEventListener('mousedown', startDragging);
        slider.addEventListener('touchstart', startDragging, { passive: false });
        
        // Update dimensions on resize
        let resizeTimeout;
        window.addEventListener('resize', () => {
          clearTimeout(resizeTimeout);
          resizeTimeout = setTimeout(updateSliderRect, 100);
        });
        
        updateSliderRect();
      });
    }
  })();
</script>

{% schema %}
{
  "name": "Media with Multicolumn",
  "class": "section",
  "tag": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "inline_richtext",
      "id": "title",
      "default": "Media with Multicolumn",
      "label": "t:sections.multicolumn.settings.title.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        },
        {
          "value": "hxl",
          "label": "t:sections.all.heading_size.options__4.label"
        },
        {
          "value": "hxxl",
          "label": "t:sections.all.heading_size.options__5.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "header",
      "content": "Media settings"
    },
    {
      "type": "checkbox",
      "id": "enable_before_after",
      "default": false,
      "label": "Enable before/after slider"
    },
    {
      "type": "image_picker",
      "id": "media_image",
      "label": "Single image",
      "info": "Used when before/after slider is disabled"
    },
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After image"
    },
    {
      "type": "checkbox",
      "id": "show_labels",
      "default": true,
      "label": "Show before/after labels"
    },
    {
      "type": "text",
      "id": "before_label",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "text",
      "id": "after_label",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "select",
      "id": "media_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "Adapt to image"
        },
        {
          "value": "portrait",
          "label": "Portrait"
        },
        {
          "value": "square",
          "label": "Square"
        }
      ],
      "default": "adapt",
      "label": "Media ratio"
    },
    {
      "type": "header",
      "content": "t:sections.multicolumn.settings.header_image.content"
    },    
    {
      "type": "select",
      "id": "image_width",
      "options": [
        {
          "value": "third",
          "label": "t:sections.multicolumn.settings.image_width.options__1.label"
        },
        {
          "value": "half",
          "label": "t:sections.multicolumn.settings.image_width.options__2.label"
        },
        {
          "value": "full",
          "label": "t:sections.multicolumn.settings.image_width.options__3.label"
        }
      ],
      "default": "full",
      "label": "t:sections.multicolumn.settings.image_width.label"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.multicolumn.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.multicolumn.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.multicolumn.settings.image_ratio.options__3.label"
        },
        {
          "value": "circle",
          "label": "t:sections.multicolumn.settings.image_ratio.options__4.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.multicolumn.settings.image_ratio.label"
    },
    {
      "type": "header",
      "content": "t:sections.multicolumn.settings.header_button.content"
    },    
    {
      "type": "text",
      "id": "button_label",
      "default": "t:sections.multicolumn.settings.button_label.default",
      "label": "t:sections.multicolumn.settings.button_label.label", 
      "info": "t:sections.multicolumn.settings.button_label.info"
    },
    {
      "type": "url",
      "id": "button_link",
      "label": "t:sections.multicolumn.settings.button_link.label"
    },    
    {
      "type": "header",
      "content": "t:sections.multicolumn.settings.header_layout.content"
    },     
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 3,
      "label": "t:sections.multicolumn.settings.columns_desktop.label"
    },
    {
      "type": "select",
      "id": "column_alignment",
      "options": [
        {
          "value": "left",
          "label": "t:sections.multicolumn.settings.column_alignment.options__1.label"
        },
        {
          "value": "center",
          "label": "t:sections.multicolumn.settings.column_alignment.options__2.label"
        }
      ],
      "default": "left",
      "label": "t:sections.multicolumn.settings.column_alignment.label"
    },
    {
      "type": "select",
      "id": "background_style",
      "options": [
        {
          "value": "none",
          "label": "t:sections.multicolumn.settings.background_style.options__1.label"
        },
        {
          "value": "primary",
          "label": "t:sections.multicolumn.settings.background_style.options__2.label"
        }
      ],
      "default": "primary",
      "label": "t:sections.multicolumn.settings.background_style.label"
    },
    {
      "type": "select",
      "id": "desktop_layout",
      "options": [
        {
          "value": "image_first",
          "label": "Media first"
        },
        {
          "value": "image_second",
          "label": "Media second"
        }
      ],
      "default": "image_first",
      "label": "Desktop layout"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },    
    {
      "type": "header",
      "content": "t:sections.multicolumn.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "options": [
        {
          "value": "1",
          "label": "t:sections.multicolumn.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.multicolumn.settings.columns_mobile.options__2.label"
        }
      ],
      "default": "1",
      "label": "t:sections.multicolumn.settings.columns_mobile.label"
    },
    {
      "type": "checkbox",
      "id": "swipe_on_mobile",
      "default": false,
      "label": "t:sections.multicolumn.settings.swipe_on_mobile.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "column",
      "name": "t:sections.multicolumn.blocks.column.name",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.multicolumn.blocks.column.settings.image.label"
        },
        {
          "type": "inline_richtext",
          "id": "title",
          "default": "t:sections.multicolumn.blocks.column.settings.title.default",
          "label": "t:sections.multicolumn.blocks.column.settings.title.label"
        },
        {
          "type": "richtext",
          "id": "text",
          "default": "t:sections.multicolumn.blocks.column.settings.text.default",
          "label": "t:sections.multicolumn.blocks.column.settings.text.label"
        },
        {
          "type": "text",
          "id": "link_label",
          "label": "t:sections.multicolumn.blocks.column.settings.link_label.label",
          "info": "t:sections.multicolumn.blocks.column.settings.link_label.info"
        },
        {
          "type": "url",
          "id": "link",
          "label": "t:sections.multicolumn.blocks.column.settings.link.label"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Media with Multicolumn",
      "blocks": [
        {
          "type": "column"
        },
        {
          "type": "column"
        },
        {
          "type": "column"
        }
      ]
    }
  ]
}
{% endschema %}